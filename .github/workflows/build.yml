name: CI/CD for OpenCoopControl

on:
  push:
    branches: [ main, develop, release/*, feature/*, test/* ]
  pull_request:
    branches: [ main, develop, release/* ]
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache PlatformIO dependencies
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-platformio-${{ hashFiles('platformio.ini') }}
        restore-keys: ${{ runner.os }}-platformio-
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Build firmware with verbose
      run: |
        platformio run -e esp32dev -v
        echo "Checking firmware.elf size:"
        ls -la .pio/build/esp32dev/firmware.elf
        if [ ! -s .pio/build/esp32dev/firmware.elf ]; then
          echo "Error: firmware.elf is empty!"
          exit 1
        fi
        echo "Running esptool.py manually:"
        /opt/hostedtoolcache/Python/3.12.9/x64/bin/python /home/runner/.platformio/packages/tool-esptoolpy/esptool.py \
          --chip esp32 elf2image --flash_mode dio --flash_freq 40m --flash_size 4MB \
          --elf-sha256-offset 0xb0 -o .pio/build/esp32dev/firmware.bin .pio/build/esp32dev/firmware.elf
        echo "Checking firmware.bin size after build:"
        ls -la .pio/build/esp32dev/firmware.bin
        if [ ! -s .pio/build/esp32dev/firmware.bin ]; then
          echo "Error: firmware.bin is empty after build!"
          exit 1
        fi
    
    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: |
          .pio/build/esp32dev/firmware.bin
          .pio/build/esp32dev/spiffs.bin
          .pio/build/esp32dev/*.bin

  release-assets:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download firmware artifacts
      uses: actions/download-artifact@v4
      with:
        name: firmware
        path: ./dist
    
    - name: Create release directories
      run: mkdir -p ./release
    
    - name: Generate Windows flash script
      run: |
        echo '@echo off' > ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo OpenCoopControl Flashing Tool' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo ============================' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set FIRMWARE=opencoopcontrol_${{ github.ref_name || 'test' }}_firmware.bin' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set SPIFFS=opencoopcontrol_${{ github.ref_name || 'test' }}_spiffs.bin' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set BOOTLOADER=bootloader.bin' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set PARTITIONS=partitions.bin' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'REM Check if files exist' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'if not exist "%FIRMWARE%" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Error: Firmware file (%FIRMWARE%) not found in current directory!' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ')' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'if not exist "%BOOTLOADER%" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Error: Bootloader file (%BOOTLOADER%) not found in current directory!' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ')' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'if not exist "%PARTITIONS%" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Error: Partitions file (%PARTITIONS%) not found in current directory!' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ')' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set SPIFFS_EXISTS=true' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'if not exist "%SPIFFS%" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Note: SPIFFS file (%SPIFFS%) not found, will skip filesystem installation.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    set SPIFFS_EXISTS=false' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ')' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'REM List available COM ports' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo Scanning for available COM ports...' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'powershell -command "Get-WmiObject Win32_PnPEntity | Where-Object { $_.Name -match ''COM\d+'' } | ForEach-Object { $_.Name } | Sort-Object"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set /p PORT="Enter COM port (e.g., COM3): "' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'REM Validate COM port format' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set PORT=%PORT: =%' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'if "%PORT:~0,3%" neq "COM" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    set PORT=COM%PORT%' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ')' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo Using port: %PORT%' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo Select flashing mode:' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo 1. Update firmware only (preserves settings)' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo 2. Full installation (erases all settings)' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'set /p MODE="Enter option (1/2): "' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'if "%MODE%"=="1" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Updating firmware only - settings will be preserved...' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Flashing firmware...' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    esptool.py --chip esp32 --port %PORT% --baud 115200 write_flash -z 0x10000 %FIRMWARE%' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    if %ERRORLEVEL% neq 0 (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        echo Error flashing firmware. Please try again.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    )' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Firmware update complete!' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ') else if "%MODE%"=="2" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Performing full installation - ALL SETTINGS WILL BE ERASED!' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Erasing flash...' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    esptool.py --chip esp32 --port %PORT% --baud 115200 erase_flash' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    if %ERRORLEVEL% neq 0 (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        echo Error erasing flash. Please try again.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    )' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Flashing bootloader and partition table...' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    esptool.py --chip esp32 --port %PORT% --baud 115200 write_flash 0x1000 %BOOTLOADER% 0x8000 %PARTITIONS%' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    if %ERRORLEVEL% neq 0 (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        echo Error flashing bootloader or partitions. Please try again.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    )' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Flashing firmware...' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    esptool.py --chip esp32 --port %PORT% --baud 115200 write_flash 0x10000 %FIRMWARE%' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    if %ERRORLEVEL% neq 0 (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        echo Error flashing firmware. Please try again.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    )' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    if "%SPIFFS_EXISTS%"=="true" (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        echo Flashing filesystem...' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        esptool.py --chip esp32 --port %PORT% --baud 115200 write_flash 0x310000 %SPIFFS%' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        if %ERRORLEVEL% neq 0 (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '            echo Error flashing filesystem. Please try again.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '            goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        )' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    ) else (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '        echo Skipping filesystem flashing (SPIFFS file not found).' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    )' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Full installation complete! Device will start in setup mode.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ') else (' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    echo Invalid option selected. Please run the script again.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo '    goto :exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ')' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo ':exit' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'echo.' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat
        echo 'pause' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.bat

    - name: Generate Linux/Mac flash script
      run: |
        echo '#!/bin/bash' > ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo "OpenCoopControl Flashing Tool"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo "============================"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '# Detect operating system' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'if [[ "$OSTYPE" == "darwin"* ]]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # macOS' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Detected macOS system"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Scanning for available ports..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Create array of available ports' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ports=()' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Find available serial ports' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    mac_ports=$(ls /dev/cu.* 2>/dev/null)' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    if [ -z "$mac_ports" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "No serial ports found. Make sure your ESP32 is connected."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "You might need to install the driver: https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Add each port to the array' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    while read -r port; do' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        if [[ "$port" != *"Bluetooth"* ]]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '            ports+=("$port")' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    done <<< "$mac_ports"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'elif [[ "$OSTYPE" == "linux-gnu"* ]]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Linux' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Detected Linux system"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Scanning for available ports..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Create array of available ports' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ports=()' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Common Linux ports for ESP32' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    for port in /dev/ttyUSB* /dev/ttyACM*; do' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        if [ -e "$port" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '            ports+=("$port")' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    done' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    if [ ${#ports[@]} -eq 0 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "No serial ports found. Make sure your ESP32 is connected."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "You might need to add your user to the '"'"'dialout'"'"' group:"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "sudo usermod -a -G dialout \$USER"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "Then log out and log back in."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'else' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Default to /dev/ttyUSB0 for other systems' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ports=("/dev/ttyUSB0")' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "NOTE: For Windows users, run the .bat script instead!"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '# If multiple ports found, let user select' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'if [ ${#ports[@]} -gt 1 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Multiple serial ports found. Please select the correct port:"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    for i in "${!ports[@]}"; do' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "  $((i+1)). ${ports[$i]}"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    done' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    # Prompt user to select a port' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    selected=0' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    while [ $selected -lt 1 ] || [ $selected -gt ${#ports[@]} ]; do' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        read -p "Enter port number (1-${#ports[@]}): " selected' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        if ! [[ "$selected" =~ ^[0-9]+$ ]]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '            selected=0' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    done' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    PORT="${ports[$((selected-1))]}"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'elif [ ${#ports[@]} -eq 1 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    PORT="${ports[0]}"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Found port: $PORT"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'else' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "No ports found. Please check your connection."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo "Using port: $PORT"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '# Binary files' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'FIRMWARE="opencoopcontrol_${{ github.ref_name || 'test' }}_firmware.bin"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'SPIFFS="opencoopcontrol_${{ github.ref_name || 'test' }}_spiffs.bin"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'BOOTLOADER="bootloader.bin"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'PARTITIONS="partitions.bin"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '# Check if files exist' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'if [ ! -f "$FIRMWARE" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Error: Firmware file ($FIRMWARE) not found in current directory!"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'if [ ! -f "$BOOTLOADER" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Error: Bootloader file ($BOOTLOADER) not found in current directory!"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'if [ ! -f "$PARTITIONS" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Error: Partitions file ($PARTITIONS) not found in current directory!"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '# SPIFFS is optional' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'SPIFFS_EXISTS=true' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'if [ ! -f "$SPIFFS" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Note: SPIFFS file ($SPIFFS) not found, will skip filesystem installation."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    SPIFFS_EXISTS=false' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo "Select flashing mode:"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo "1. Update firmware only (preserves settings)"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo "2. Full installation (erases all settings)"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'read -p "Enter option (1/2): " MODE' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'if [ "$MODE" = "1" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Updating firmware only - settings will be preserved..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Flashing firmware..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    esptool.py --chip esp32 --port "$PORT" --baud 115200 write_flash -z 0x10000 "$FIRMWARE"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    if [ $? -ne 0 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "Error flashing firmware. Please try again."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Firmware update complete!"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'elif [ "$MODE" = "2" ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Performing full installation - ALL SETTINGS WILL BE ERASED!"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Erasing flash..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    esptool.py --chip esp32 --port "$PORT" --baud 115200 erase_flash' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    if [ $? -ne 0 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "Error erasing flash. Please try again."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Flashing bootloader and partition table..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    esptool.py --chip esp32 --port "$PORT" --baud 115200 write_flash 0x1000 "$BOOTLOADER" 0x8000 "$PARTITIONS"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    if [ $? -ne 0 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "Error flashing bootloader or partitions. Please try again."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Flashing firmware..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    esptool.py --chip esp32 --port "$PORT" --baud 115200 write_flash 0x10000 "$FIRMWARE"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    if [ $? -ne 0 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "Error flashing firmware. Please try again."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    if [ "$SPIFFS_EXISTS" = true ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "Flashing filesystem..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        esptool.py --chip esp32 --port "$PORT" --baud 115200 write_flash 0x310000 "$SPIFFS"' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        if [ $? -ne 0 ]; then' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '            echo "Error flashing filesystem. Please try again."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '            exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    else' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '        echo "Skipping filesystem flashing (SPIFFS file not found)."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    ' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Full installation complete! Device will start in setup mode."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'else' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    echo "Invalid option selected. Please run the script again."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '    exit 1' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'fi' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo '' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo "If you need to change the port in the future, run this script again and select a different port."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'echo' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        echo 'read -p "Press Enter to exit..."' >> ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh
        chmod +x ./release/flash_opencoopcontrol_${{ github.ref_name || 'test' }}.sh

    - name: Prepare release assets with fallbacks
      run: |
        # Copy firmware with fallbacks
        if [ -f "./dist/firmware.bin" ] && [ -s "./dist/firmware.bin" ]; then
          cp ./dist/firmware.bin ./release/opencoopcontrol_${{ github.ref_name || 'test' }}_firmware.bin
        else
          FIRMWARE_ALT=$(find ./dist -name "*firmware*.bin" | head -1)
          if [ ! -z "$FIRMWARE_ALT" ] && [ -s "$FIRMWARE_ALT" ]; then
            echo "Using alternative firmware file: $FIRMWARE_ALT"
            cp "$FIRMWARE_ALT" ./release/opencoopcontrol_${{ github.ref_name || 'test' }}_firmware.bin
          else
            echo "Error: No non-empty firmware file found!"
            ls -la ./dist/
            exit 1
          fi
        fi
        
        # Copy SPIFFS with fallbacks
        if [ -f "./dist/spiffs.bin" ] && [ -s "./dist/spiffs.bin" ]; then
          cp ./dist/spiffs.bin ./release/opencoopcontrol_${{ github.ref_name || 'test' }}_spiffs.bin
        else
          SPIFFS_ALT=$(find ./dist -name "*spiffs*.bin" | head -1)
          if [ ! -z "$SPIFFS_ALT" ] && [ -s "$SPIFFS_ALT" ]; then
            echo "Using alternative SPIFFS file: $SPIFFS_ALT"
            cp "$SPIFFS_ALT" ./release/opencoopcontrol_${{ github.ref_name || 'test' }}_spiffs.bin
          else
            echo "No valid SPIFFS file found, skipping (optional)"
          fi
        fi
        
        # Copy bootloader with fallbacks
        if [ -f "./dist/bootloader.bin" ] && [ -s "./dist/bootloader.bin" ]; then
          cp ./dist/bootloader.bin ./release/bootloader.bin
        else
          BOOTLOADER_ALT=$(find ./dist -name "*bootloader*.bin" | head -1)
          if [ ! -z "$BOOTLOADER_ALT" ] && [ -s "$BOOTLOADER_ALT" ]; then
            echo "Using alternative bootloader file: $BOOTLOADER_ALT"
            cp "$BOOTLOADER_ALT" ./release/bootloader.bin
          else
            echo "No bootloader file found!"
            exit 1
          fi
        fi
        
        # Copy partitions with fallbacks
        if [ -f "./dist/partitions.bin" ] && [ -s "./dist/partitions.bin" ]; then
          cp ./dist/partitions.bin ./release/partitions.bin
        else
          PARTITIONS_ALT=$(find ./dist -name "*partitions*.bin" | head -1)
          if [ ! -z "$PARTITIONS_ALT" ] && [ -s "$PARTITIONS_ALT" ]; then
            echo "Using alternative partitions file: $PARTITIONS_ALT"
            cp "$PARTITIONS_ALT" ./release/partitions.bin
          else
            echo "No partitions file found!"
            exit 1
          fi
        fi

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      if: github.event_name == 'release'
      with:
        files: |
          ./release/opencoopcontrol_${{ github.ref_name }}_firmware.bin
          ?./release/opencoopcontrol_${{ github.ref_name }}_spiffs.bin
          ./release/bootloader.bin
          ./release/partitions.bin
          ./release/flash_opencoopcontrol_${{ github.ref_name }}.bat
          ./release/flash_opencoopcontrol_${{ github.ref_name }}.sh
        token: ${{ secrets.RELEASE_TOKEN }}
          
    - name: Upload test assets
      uses: actions/upload-artifact@v4
      if: github.event_name == 'workflow_dispatch'
      with:
        name: test-release-assets
        path: ./release/